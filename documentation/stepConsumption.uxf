<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="13.2">
  <help_text>

// Uncomment the following line to change the fontsize and font:
// fontsize=14
// fontfamily=SansSerif //possible: SansSerif,Serif,Monospaced


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/- or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>10</zoom_level>
  <element>
    <type>com.baselet.element.old.allinone.ActivityDiagramText</type>
    <coordinates>
      <x>30</x>
      <y>0</y>
      <w>913</w>
      <h>1765</h>
    </coordinates>
    <panel_attributes>title:Consumer.stepConsumption()
Start
empty demandsList
(start computation of desiredDemand)\desiredDemand=0
While[for each product type:\while\OfficeForStatistics.\industriesList.\hasNext()]
	determine consumption for this product type\based on disposableIncome, etc. . . .
	create a new AproductDemand having the computed demand
	add the productDemand to the demandsList
	increase desiredDemand\by this product desiredDemand
(end computation of desiredDemand)\\(startComputation of financialResources)\financialResourcesInBankAccounts=0\debtInBankAcounts=0\unpaidAmountInBankAccounts=0
While[while\bankAccountsList.\hasNext()]
	get bankAccount
	increase unpaidAmountInBankAccounts\by this account unpaidAmount
	If
		[if\account&gt;0]
		increase financialResourcesInBankAccounts\by account

		[if\account&lt;=0]
		increase debtInBankAccounts\by account
	EndIf
(end computation of financialResources)

identification of\bestBankAccount\and\worstBankAccount

If
	[if\desiredDemand+\unpaidAmountInBankAccounts\&lt;=\disposableIncome+\financialResources]


	[if\desiredDemand+\unpaidAmountInBankAccounts\&gt;\disposableIncome+\financialResources]
	set the desired credit in\the bestBankAccount as\account+\(desiredDemand +\unpaidAmountInBankAccounts-\disposableIncome -\financialResources)

End
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Text</type>
    <coordinates>
      <x>980</x>
      <y>1540</y>
      <w>170</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>In future methods
check how to manage
the case of a positive
account</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.baselet.element.old.element.Relation</type>
    <coordinates>
      <x>810</x>
      <y>1550</y>
      <w>180</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;-</panel_attributes>
    <additional_attributes>30;30;160;30</additional_attributes>
  </element>
</diagram>
